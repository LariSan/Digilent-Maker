/************************************************************************/
/*																								*/
/*	linear_filter.c -- functions for Digilent Image Linear Filter			*/
/*																								*/
/************************************************************************/
/*	Author: HE, Cong; WANG, Tinghui (Steve)										*/
/*	Copyright 2011 Digilent CN															*/
/************************************************************************/
/*  Module Description: 																*/
/*		- provides various procedures for linearfilter module					*/
/*																								*/
/************************************************************************/
/*  Revision History:																	*/
/*			1.0	Initial Release		WANG, Tinghui		19May2011			*/
/*																								*/
/************************************************************************/

/* ------------------------------------------------------------ */
/*				Include File Definitions									 */
/* ------------------------------------------------------------ */
#include "linear_filter_header.h"
#include <xil_io.h>

#define printf xil_printf


#define hsync 0x00000080
#define hbpr 0x000000D8
#define hfpr 0x000003F8
#define htr 0x0000041F
#define vsync 0x00000004
#define vbpr 0x0000001B
#define vfpr 0x00000273
#define vtr 0x00000273

/* ------------------------------------------------------------ */
/*				Local Type Definitions										 */
/* ------------------------------------------------------------ */

/* ------------------------------------------------------------ */
/*				Global Variables												 */
/* ------------------------------------------------------------ */

/* ------------------------------------------------------------ */
/*				Local Variables												 */
/* ------------------------------------------------------------ */

/* ------------------------------------------------------------ */
/*				Forward Declarations											 */
/* ------------------------------------------------------------ */

/* ------------------------------------------------------------ */
/*				Procedure Definitions										 */
/* ------------------------------------------------------------ */

/***	LinearFilterInit
 **
 **	Synopsis:
 **		LinearFilterInit(lLinearFilterBaseAddress)
 **
 **	Parameters:
 **		u32 lLinearFilterBaseAddress: base address for corresponding linearfilter device
 **
 **	Return Value:
 **		integer: 0 - success; others - failure
 **
 **	Errors:
 **		none
 **
 **	Description:
 **		The function sets the display parameters for linear filter.
 **		In this project, the parameters are set to be a linear kernel.
 **
 */

int LinearFilterInit(u32 lLinearFilterBaseAddress, u32 fOptions) {
	switch (fOptions) {
	case LinearFilter_Bilinear:
		Xil_Out32(lLinearFilterBaseAddress + blLinearFilterMat11, 0x00000001); // <1,1>
		Xil_Out32(lLinearFilterBaseAddress + blLinearFilterMat12, 0x00000002); // <1,2>
		Xil_Out32(lLinearFilterBaseAddress + blLinearFilterMat13, 0x00000001); // <1,3>
		Xil_Out32(lLinearFilterBaseAddress + blLinearFilterMat21, 0x00000002); // <2,1>
		Xil_Out32(lLinearFilterBaseAddress + blLinearFilterMat22, 0x00000004); // <2,2>
		Xil_Out32(lLinearFilterBaseAddress + blLinearFilterMat23, 0x00000002); // <2,3>
		Xil_Out32(lLinearFilterBaseAddress + blLinearFilterMat31, 0x00000001); // <3,1>
		Xil_Out32(lLinearFilterBaseAddress + blLinearFilterMat32, 0x00000002); // <3,2>
		Xil_Out32(lLinearFilterBaseAddress + blLinearFilterMat33, 0x00000001); // <3,3>
		
		Xil_Out32(lLinearFilterBaseAddress + blLinearFilterDIV, 0x00000010); // set divider: 16
		
		Xil_Out32(lLinearFilterBaseAddress + blLinearFilterHSR, hsync); // hsync
		Xil_Out32(lLinearFilterBaseAddress + blLinearFilterHBPR, hbpr); // hbpr
		Xil_Out32(lLinearFilterBaseAddress + blLinearFilterHFPR, hfpr); // hfpr
		Xil_Out32(lLinearFilterBaseAddress + blLinearFilterHTR, htr); // htr
		Xil_Out32(lLinearFilterBaseAddress + blLinearFilterVSR, vsync); // vsync
		Xil_Out32(lLinearFilterBaseAddress + blLinearFilterVBPR, vbpr); // vbpr
		Xil_Out32(lLinearFilterBaseAddress + blLinearFilterVFPR, vfpr); // vfpr
		Xil_Out32(lLinearFilterBaseAddress + blLinearFilterVTR, vtr); // vtr

		Xil_Out32(lLinearFilterBaseAddress + blLinearFilterCR, 0x00000001); // enable linear filter
		break;
	case LinearFilter_Sobel:
		Xil_Out32(lLinearFilterBaseAddress + blLinearFilterMat11, 0x000000ff); // <1,1>
		Xil_Out32(lLinearFilterBaseAddress + blLinearFilterMat12, 0x00000000); // <1,2>
		Xil_Out32(lLinearFilterBaseAddress + blLinearFilterMat13, 0x00000001); // <1,3>
		Xil_Out32(lLinearFilterBaseAddress + blLinearFilterMat21, 0x000000fe); // <2,1>
		Xil_Out32(lLinearFilterBaseAddress + blLinearFilterMat22, 0x00000000); // <2,2>
		Xil_Out32(lLinearFilterBaseAddress + blLinearFilterMat23, 0x00000002); // <2,3>
		Xil_Out32(lLinearFilterBaseAddress + blLinearFilterMat31, 0x000000ff); // <3,1>
		Xil_Out32(lLinearFilterBaseAddress + blLinearFilterMat32, 0x00000000); // <3,2>
		Xil_Out32(lLinearFilterBaseAddress + blLinearFilterMat33, 0x00000001); // <3,3>
		
		Xil_Out32(lLinearFilterBaseAddress + blLinearFilterDIV, 0x00000004); // set divider: 4
		
		Xil_Out32(lLinearFilterBaseAddress + blLinearFilterHSR, hsync); // hsync
		Xil_Out32(lLinearFilterBaseAddress + blLinearFilterHBPR, hbpr); // hbpr
		Xil_Out32(lLinearFilterBaseAddress + blLinearFilterHFPR, hfpr); // hfpr
		Xil_Out32(lLinearFilterBaseAddress + blLinearFilterHTR, htr); // htr
		Xil_Out32(lLinearFilterBaseAddress + blLinearFilterVSR, vsync); // vsync
		Xil_Out32(lLinearFilterBaseAddress + blLinearFilterVBPR, vbpr); // vbpr
		Xil_Out32(lLinearFilterBaseAddress + blLinearFilterVFPR, vfpr); // vfpr
		Xil_Out32(lLinearFilterBaseAddress + blLinearFilterVTR, vtr); // vtr

		Xil_Out32(lLinearFilterBaseAddress + blLinearFilterCR, 0x00000001); // enable linear filter
		break;
	case LinearFilter_Enhanced:
		Xil_Out32(lLinearFilterBaseAddress + blLinearFilterMat11, 0x000000ff); // <1,1>
		Xil_Out32(lLinearFilterBaseAddress + blLinearFilterMat12, 0x000000ff); // <1,2>
		Xil_Out32(lLinearFilterBaseAddress + blLinearFilterMat13, 0x000000ff); // <1,3>
		Xil_Out32(lLinearFilterBaseAddress + blLinearFilterMat21, 0x000000ff); // <2,1>
		Xil_Out32(lLinearFilterBaseAddress + blLinearFilterMat22, 0x00000009); // <2,2>
		Xil_Out32(lLinearFilterBaseAddress + blLinearFilterMat23, 0x000000ff); // <2,3>
		Xil_Out32(lLinearFilterBaseAddress + blLinearFilterMat31, 0x000000ff); // <3,1>
		Xil_Out32(lLinearFilterBaseAddress + blLinearFilterMat32, 0x000000ff); // <3,2>
		Xil_Out32(lLinearFilterBaseAddress + blLinearFilterMat33, 0x000000ff); // <3,3>
		
		Xil_Out32(lLinearFilterBaseAddress + blLinearFilterDIV, 0x00000001); // set divider: 1
		
		Xil_Out32(lLinearFilterBaseAddress + blLinearFilterHSR, hsync); // hsync
		Xil_Out32(lLinearFilterBaseAddress + blLinearFilterHBPR, hbpr); // hbpr
		Xil_Out32(lLinearFilterBaseAddress + blLinearFilterHFPR, hfpr); // hfpr
		Xil_Out32(lLinearFilterBaseAddress + blLinearFilterHTR, htr); // htr
		Xil_Out32(lLinearFilterBaseAddress + blLinearFilterVSR, vsync); // vsync
		Xil_Out32(lLinearFilterBaseAddress + blLinearFilterVBPR, vbpr); // vbpr
		Xil_Out32(lLinearFilterBaseAddress + blLinearFilterVFPR, vfpr); // vfpr
		Xil_Out32(lLinearFilterBaseAddress + blLinearFilterVTR, vtr); // vtr

		Xil_Out32(lLinearFilterBaseAddress + blLinearFilterCR, 0x00000001); // enable linear filter
		break;
	case LinearFilter_Corner:
		Xil_Out32(lLinearFilterBaseAddress + blLinearFilterMat11, 0x00000001); // <1,1>
		Xil_Out32(lLinearFilterBaseAddress + blLinearFilterMat12, 0x000000fe); // <1,2>
		Xil_Out32(lLinearFilterBaseAddress + blLinearFilterMat13, 0x00000001); // <1,3>
		Xil_Out32(lLinearFilterBaseAddress + blLinearFilterMat21, 0x000000fe); // <2,1>
		Xil_Out32(lLinearFilterBaseAddress + blLinearFilterMat22, 0x00000004); // <2,2>
		Xil_Out32(lLinearFilterBaseAddress + blLinearFilterMat23, 0x000000fe); // <2,3>
		Xil_Out32(lLinearFilterBaseAddress + blLinearFilterMat31, 0x00000001); // <3,1>
		Xil_Out32(lLinearFilterBaseAddress + blLinearFilterMat32, 0x000000fe); // <3,2>
		Xil_Out32(lLinearFilterBaseAddress + blLinearFilterMat33, 0x00000001); // <3,3>
		
		Xil_Out32(lLinearFilterBaseAddress + blLinearFilterDIV, 0x00000004); // set divider: 1
		
		Xil_Out32(lLinearFilterBaseAddress + blLinearFilterHSR, hsync); // hsync
		Xil_Out32(lLinearFilterBaseAddress + blLinearFilterHBPR, hbpr); // hbpr
		Xil_Out32(lLinearFilterBaseAddress + blLinearFilterHFPR, hfpr); // hfpr
		Xil_Out32(lLinearFilterBaseAddress + blLinearFilterHTR, htr); // htr
		Xil_Out32(lLinearFilterBaseAddress + blLinearFilterVSR, vsync); // vsync
		Xil_Out32(lLinearFilterBaseAddress + blLinearFilterVBPR, vbpr); // vbpr
		Xil_Out32(lLinearFilterBaseAddress + blLinearFilterVFPR, vfpr); // vfpr
		Xil_Out32(lLinearFilterBaseAddress + blLinearFilterVTR, vtr); // vtr

		Xil_Out32(lLinearFilterBaseAddress + blLinearFilterCR, 0x00000001); // enable linear filter
		break;
	case LinearFilter_Bypass:
		Xil_Out32(lLinearFilterBaseAddress + blLinearFilterCR, 0x00000000); // disable linear filter
	default:
		Xil_Out32(lLinearFilterBaseAddress + blLinearFilterMat11, 0x00000000); // <1,1>
		Xil_Out32(lLinearFilterBaseAddress + blLinearFilterMat12, 0x00000000); // <1,2>
		Xil_Out32(lLinearFilterBaseAddress + blLinearFilterMat13, 0x00000000); // <1,3>
		Xil_Out32(lLinearFilterBaseAddress + blLinearFilterMat21, 0x00000000); // <2,1>
		Xil_Out32(lLinearFilterBaseAddress + blLinearFilterMat22, 0x00000001); // <2,2>
		Xil_Out32(lLinearFilterBaseAddress + blLinearFilterMat23, 0x00000000); // <2,3>
		Xil_Out32(lLinearFilterBaseAddress + blLinearFilterMat31, 0x00000000); // <3,1>
		Xil_Out32(lLinearFilterBaseAddress + blLinearFilterMat32, 0x00000000); // <3,2>
		Xil_Out32(lLinearFilterBaseAddress + blLinearFilterMat33, 0x00000000); // <3,3>
		
		Xil_Out32(lLinearFilterBaseAddress + blLinearFilterDIV, 0x00000001); // set divider: 1
		
		Xil_Out32(lLinearFilterBaseAddress + blLinearFilterHSR, hsync); // hsync
		Xil_Out32(lLinearFilterBaseAddress + blLinearFilterHBPR, hbpr); // hbpr
		Xil_Out32(lLinearFilterBaseAddress + blLinearFilterHFPR, hfpr); // hfpr
		Xil_Out32(lLinearFilterBaseAddress + blLinearFilterHTR, htr); // htr
		Xil_Out32(lLinearFilterBaseAddress + blLinearFilterVSR, vsync); // vsync
		Xil_Out32(lLinearFilterBaseAddress + blLinearFilterVBPR, vbpr); // vbpr
		Xil_Out32(lLinearFilterBaseAddress + blLinearFilterVFPR, vfpr); // vfpr
		Xil_Out32(lLinearFilterBaseAddress + blLinearFilterVTR, vtr); // vtr

		Xil_Out32(lLinearFilterBaseAddress + blLinearFilterCR, 0x00000001); // enable linear filter
		break;
	}
	return 0;
}
